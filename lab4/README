Files:
increment.c
Makefile

How to Compile & Run:
'./make', './make all', and './make increment' compile the program.
'./make clean' removes extraneous object and binary files created during compilation.
'./increment -n <nthread>' runs the program with nthread number of threads.  The -n argument is required.

Description:
This program increments a counter initialized at 0.  Each thread calls a function which increments
the counter through 1000 iterations.  The number of threads to spawn is specified by the -n argument.
The program runs without race conditions because the increment function is thread safe.

A struct 'threadIncr' was created to hold the number of iterations and the counter in order to generalize
a multithreaded application's argument supplied to pthread_create.

The threads are calloc'd so that they are stored on the heap instead of the stack.  This is because the number
of threads is a variable amount dependent on user input, and although C99 allows variable-length arrays,
it is considered bad practice.

In the program, each thread is created in a loop, causing multiple threads to call the same function and
modify the same arguments.  The mutex then locks and unlocks when the increment call is started and finished.
Another loop waits for each thread to finish executing before destroying the mutex and ending the program.

A mutex is a structure with a value that signals to other concurrent threads if
it is currently active in a critical section or not.  This prevents a shared variable
being modified by concurrent threads until the ongoing thread has completed its execution.

A race condition is when a shared variable is being modified by multiple threads at once in a
critical section, causing the threads to "race" each other to modify the variable before the others.
If this happens, the resulting behavior is not deterministic and some data may be lost due.
