In main(), firstPoint and secondPoint would hold a NULL address.
This is because makePoint() returns the address of thisCoordinate,
but thisCoordinate does not hold an address that is outside of the scope
of makePoint() when it is returned, causing any value it returns to be garbage.

To fix this, we can simply change thisCoordinate to a pointer to a struct
cartesianCoordinate, and then initialize it by allocating space on the heap through malloc (# include <stdlib.h>).
This preserves the address that we allocated even after makePoint() returns its pointer,
and therefore, allows firstPoint and secondPoint to correctly hold a valid address with their
respective x and y coordinates.

After the program's use of firstPoint and secondPoint are done, we must then free the allocated
space.  Then, thanks to gdb, we can see that the values of firstPoint and secondPoint remain,
despite being unallocated.  Therefore, for extra security, both must be set to NULL.

Files:
gdbLab.c
Makefile

How to Compile and Run:
'make', 'make all', or 'make gdbLab' will compile the program.
'make clean' will remove object and binary files.
'./gdbLab' will run the program when compiled.

Description:
./gdbLab will calculate the distance between cartesian coordinates (3, 5) and (4, 7).
